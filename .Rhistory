residuals.df
res.p <- ggplot(data=residuals.df) + aes(sample=res, fill=factor(model)) +
geom_hline(intercept=0)
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(sample=res, fill=factor(model)) +
geom_hline(yintercept=0)
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(sample=res, fill=factor(model)) +
geom_point()
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, fill=factor(model)) +
geom_point()
print(res.p)
?geom_point
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point()
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=2)
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3)
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, alpha=0.2)
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, aes(shape=model))
print(res.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, aes(shape=model)) + labs(x="Fitted Y",y="Residual")
print(res.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) + stat_qq
print(qq.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) + stat_qq()
print(qq.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) +
stat_qq(size=3, aes(shape=model))
print(qq.p)
residuals.df <- data.frame(res=
as.numeric(c(residuals(m1),residuals(m2),residuals(m3))),
fit= as.numeric(c(fitted(m1),fitted(m2),fitted(m2))),
model=c(rep("M1",length(residuals(m1))),
rep("M2",length(residuals(m2))),
rep("M3",length(residuals(m3)))) )
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, aes(shape=model)) + labs(x="Fitted Y",y="Residual")
print(res.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) +
stat_qq(size=3, aes(shape=model))
print(qq.p)
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, aes(shape=model)) + geom_hline(yintercept=0) +
labs(x="Fitted Y",y="Residual")
print(res.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) +
stat_qq(size=3, aes(shape=model)) + geom_abline(intercept=0,slope=1)
print(qq.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=res, color=model) +
xlim(-10,10) + stat_qq(size=3, aes(shape=model)) +  geom_abline(intercept=0,slope=1)
print(qq.p)
plot(m1)
stat_qq(size=3, aes(shape=model)) +  geom_abline(intercept=0,slope=1)
print(qq.p)
residuals.df <- data.frame(
res=as.numeric(c(residuals(m1),residuals(m2),residuals(m3))),
sres=as.numeric(c(rstandard(m1),rstandard(m2),rstandard(m3))),
fit= as.numeric(c(fitted(m1),fitted(m2),fitted(m2))),
model=c(rep("M1",length(residuals(m1))),
rep("M2",length(residuals(m2))),
rep("M3",length(residuals(m3)))) )
qq.p <- ggplot(data=residuals.df) + aes(sample=sres, color=model) +
stat_qq(size=3, aes(shape=model)) +  geom_abline(intercept=0,slope=1)
print(qq.p)
summary(m1)
summary(m2)
residuals(m2)
as.numeric(residuals(m2))
m2.extract()
lm.extract(m2)
str(m2)
m2$simga
m2$sigma
summary(m2)$sigma
as.numeric(residuals(m2))/summary(m2)$sigma
as.numeric(sresiduals(m2))
as.numeric(rstandard(m2))
summary(m3)
residuals.df <- data.frame(
res=as.numeric(c(residuals(m1),residuals(m2),residuals(m3))),
sres=as.numeric(c(rstandard(m1),rstandard(m2),rstandard(m3))),
fit= as.numeric(c(fitted(m1),fitted(m2),fitted(m2))),
model=c(rep("M1",length(residuals(m1))),
rep("M2",length(residuals(m2))),
rep("M3",length(residuals(m3)))) )
res.p <- ggplot(data=residuals.df) + aes(y=res, x=fit, color=model) +
geom_point(size=3, aes(shape=model)) + geom_hline(yintercept=0) +
labs(x="Fitted Y",y="Residual")
print(res.p)
qq.p <- ggplot(data=residuals.df) + aes(sample=sres, color=model) +
stat_qq(size=3, aes(shape=model)) +  geom_abline(intercept=0,slope=1) +
labs(y="Standard Residuals")
print(qq.p)
print(sum.auto)
print(sum.man)
# Initialize
library(ggplot2)
# Data loading and set up
#Column Name | Description
#------------|------------
#mpg         | miles per gallon
#cyl         | number of cylinders (4, 6, or 8)
#dis         | engine size (cu. in.)
#hp          | gross horsepower
#drat        | rear axle ratio
#wt          | weight (lb/1000)
#qsec        | 1/4 mile time (sec)
#vs          | engine shape V or straight
#am          | Transmission (0=automatic, 1=manual)
#gear        | number of forward gears
#carb        | number of carburators (barrels)
# load libraries and prepare the data
data(mtcars)
# dim(mtcars); str(mtcars)
# Convert data to factors as appropriate
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
f <- function(am){
if(am==0) return("auto")
return("manual")
}
mtcars$Transmission <- sapply(mtcars$am,f)
auto.t <- mtcars$am == 0; man.t <- mtcars$am == 1
# Exploratory Data Analysis
p1 <- ggplot(data=mtcars,aes(x=factor(Transmission), y=mpg)) +
geom_boxplot(aes(fill=Transmission)) + xlab("") + ylab("MPG")
print(p1)
sum.auto <- summary(mtcars$mpg[auto.t])
sum.man <-  summary(mtcars$mpg[man.t])
tt <- t.test(mtcars$mpg[auto.t], mtcars$mpg[man.t],alternative = c("less"))
lolim <- tt$conf.int[1]; hilim <- tt$conf.int[2]
corr.mpg <- sapply(c("wt","disp","hp"),function(x) cor(mtcars$mpg,mtcars[x]))
p2 <- ggplot(data=mtcars,aes(y=mpg,x=wt)) + labs(x="Weight (lbs/1000"),
y="MPG") + geom_point(aes(color=Transmission,shape=cyl,size=disp))
p2 <- ggplot(data=mtcars,aes(y=mpg,x=wt)) +
labs(x="Weight (lbs/1000"),y="MPG") +
geom_point(aes(color=Transmission,shape=cyl,size=disp))
print(p2)
p2 <- ggplot(data=mtcars,aes(y=mpg,x=wt)) +
labs(x="Weight (lbs/1000)",y="MPG") +
geom_point(aes(color=Transmission,shape=cyl,size=disp))
print(p2)
integrate <- function(n) {
ts <- seq(0,2*pi,by=10^(-n))
xs <- 3*cos(ts); ys <- 3*sin(ts) + 2
dxs <- xs[2:length(xs)] - xs[1:(length(xs)-1)]
dys <- ys[2:length(xs)] - ys[1:(length(ys)-1)]
xms <- (0.5)*(xs[2:length(xs)] + xs[1:(length(xs)-1)])
yms <- (0.5)*(ys[2:length(ys)] + ys[1:(length(ys)-1)])
fx <- xms^2 ; fy <- yms
sum(fx*dxs + fy*dys)
}
integrate(10)
integrate(1)
integrate(2)
integrate(3)
integrate(4)
integrate(5)
integrate(6)
c(1,2,3)*c(10,11)
?runif
rep(runif(),3)
runif(3)
seq(10)
inside <- function(c,r){
if(sum(c*c) <= r^2): return(TRUE)
return(FALSE)
}
inside <- function(c,r) {
if(sum(c*c) <= r^2): return(TRUE)
return(FALSE)
}
inside <- function(c,r) {
if(sum(c*c) <= r^2) return(TRUE)
return(FALSE)
}
vol <- function(n,r){
counter <- 0
for(i %in% seq(n)){
p <- runif(4,-r,r)
if inside(p,r) counter += 1
}
print(paste("Volume= ",round(((2*r)^4)*(counter/n)),3))
}
vol <- function(n,r) {
counter <- 0
for(i %in% seq(n)){
p <- runif(4,-r,r)
if inside(p,r) counter += 1
}
print(paste("Volume= ",round(((2*r)^4)*(counter/n)),3))
}
?For
?for
}}
??for
??
?"for"
vol <- function(n,r) {
counter <- 0
for(i in seq(n)){
p <- runif(4,-r,r)
if inside(p,r) counter += 1
}
print(paste("Volume= ",round(((2*r)^4)*(counter/n)),3))
}
vol <- function(n,r) {
counter <- 0
for(i in seq(n)){
p <- runif(4,-r,r)
if(inside(p,r)) counter += 1
}
print(paste("Volume= ",round(((2*r)^4)*(counter/n)),3))
}
vol <- function(n,r) {
counter <- 0
for(i in seq(n)){
p <- runif(4,-r,r)
if(inside(p,r)) counter = counter + 1
}
print(paste("Volume= ",round(((2*r)^4)*(counter/n)),3))
}
inside(c(1,1,1,1),2)
inside(c(1,1,1,3),2)
vol(100,2)
round(79,3)
vol <- function(n,r) {
counter <- 0
for(i in seq(n)){
p <- runif(4,-r,r)
if(inside(p,r)) counter = counter + 1
}
print(paste("Volume= ",round( (2*r)^4)*(counter/n) ,3))
}
vol(100,2)
?round
vol <- function(n,r) {
counter <- 0
for(i in seq(n)){
p <- runif(4,-r,r)
if(inside(p,r)) counter = counter + 1
}
print(paste("Volume= ",round( (2*r)^4)*(counter/n)))
}
vol(100,2)
vol(1000,2)
vol(10000,2)
vol(100000,2)
vol(1000000,2)
vol(2000000,2)
vol(4000000,2)
vol(10000000,2)
pi*2^4/2
pi^2*2^4/2
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,p=3/4)[[1]]
training <- segmentationOriginal[inTrain]
testing <- segmentationOriginal[-inTrain]
set.seed(125)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
help(train)
getModelInfo()
names(getModelInfo())
help(rpart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,p=3/4,list=FALSE)[[1]]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
model <- train(Case ~., method='rpart',data=segmentationOriginal)
print(model$finalModel)
library(rattle)
plot(model$finalModel,uniform=TRUE,main='Tree')
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,p=3/4,list=FALSE)[[1]]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
model <- train(Case ~., method='rpart',data=training)
plot(model$finalModel,uniform=TRUE,main='Tree')
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,p=3/4,list=FALSE)[[1]]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
head(segmentationOriginal)
model <- train(Case ~., method='rpart',data=training)
plot(model$finalModel,uniform=TRUE,main='Tree')
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
names(training)
help(rpart)
help(subset)
training <- subset(segmentationOriginal,segmentationOriginal$Case=="Train")
head(training)
test <- subset(segmentationOriginal,segmentationOriginal$Case=="Test")
head(test$Case)
help(CART)
??CART
??Cart
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal,segmentationOriginal$Case=="Train")
test <- subset(segmentationOriginal,segmentationOriginal$Case=="Test")
set.seed(125)
model <- train(Class ~., method='rpart',data=training)
plot(model$finalModel,uniform=TRUE,main='Tree')
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
install.packages("rattle")
fancyRpartPlot(model$finalModel)
data1 <- data.frame(TotalIntench2=c(23000),FiberWidthCh1=c(10),
PerimStatusCh1=c(2))
data1
data2 <- data.frame(TotalIntench2=c(50000),FiberWidthCh1=c(1),
VarUbtenCh4=c(100))
data3 <- data.frame(TotalIntench2=c(57000),FiberWidthCh1=c(8),
VarUbtenCh4=c(100))
data4 <- data.frame(FiberWidthCh1=c(8),VarIntenCh4Ch1=c(100),
PerimStatusCh1=c(2))
predict(model,data1)
predict(model,newdata=data1)
test[test$TotalIntench2 == 23000,]
head(test)
out <- predict(model,newdata=test)
head out
head(out)
test[1:5,test$TotalIntench2=23000]
test[1:5,test$TotalIntench2==23000]
help(which)
help(rattle)
print(model$finalModel)
plot(model$finalModel,branch=0,main='Tree')
text(model$finalModel,use.n=TRUE)
plot(model$finalModel,uniform=T,compress=T,main='Tree')
text(model$finalModel,use.n=T,all=T)
plot(model$finalModel,branch=0.4,uniform=T,compress=T,main='Tree')
text(model$finalModel,use.n=T,all=T)
dim(training)
dim(test)
library(pgmm)
install.packages("pgmm")
load(rattle)
library(pgmm)
data(olive)
olive <- olive[,-1]
dim(olive)
head(olive)
library(caret)
help(train)
model <- train(Area ~., method='rpart',data=olive)
print(model$finalModel)
plot(model$finalModel,branch=0.4,uniform=T,compress=T,main='Tree')
; text(model$finalModel,use.n=T,all=T)
text(model$finalModel,use.n=T,all=T)
help(rpart)
help(train)
help(trainControl)
newdata <- as.data.frame(t(colMeans(olive)))
head(newdata)
help(colMeans)
dim(newdata)
colMeans(olive)
t(colMeans(olive))
out <- predict(model,newdata)
out
predict(model,olive)
help(rpart)
summary(olive)
class(olive)
str(olive)
olive2 <- data.frame(olive)
olive2$Area <- as.factor(olive2$Area)
model2 <- train(Area ~ ., method='rpart', data=olive2)
print(model2$finalModel)
predict(model2,newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
names(SAheart)
help(SAheart)
help(subset)
help(SAheart)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",family="binomial",data=trainSA)
trainSA$chd
str(trainSA)
trainSA_2 <- data.frame(trainSA)
trainSA_2$chd <- as.factor(trainSA_2$chd)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",family="binomial",data=trainSA)
help(train)
help(trainControl)
p <- predict(model,trainSA)
p
model2 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",family="binomial",data=trainSA_2)
p2 <- predict(model2,trainSA_2)
p2
missClass <- function(values,prediction){
sum(((prediction > 0.5)*1) !=values)/length(values)}
p1_test <- predict(model,trainSA)
p1_train <- predict(model,trainSA)
p1_train <- predict(model,trainSA)
p1_test <- predcit(model,testSA)
p1_test <- predict(model,testSA)
m1_train <- missClass(trainSA$chd,p1_train)
m1_test <- missClass(testSA$chd,p1_test)
m1_train
m1_test
library(ElemStatlearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y ~ ., method='rf',prox=T,data=vowel.train)
library(caret)
model <- train(y ~ ., method='rf',prox=T,data=vowel.train)
model <- train(y ~ ., method='rf',prox=T,data=vowel.train)
help(varImp)
varImp(model)
library(caret)
help(train)
confusionMatrix
help(confusionMatrix)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
mRF <- train(y ~ ., model='rf',data=vowel.train)
mGBM <- train(y ~., model='gbm',data=vowel.train)
oRF <- predict(mRF,vowel.test)
oGBM <- predict(mGBM,vowel.test)
cmRF <- confusionMatrix(oRF,vowel.test$y)
cmGBM <- confusionMatrix(oGBM,vowel.test$y)
print(cmRF)
print(cmGBM)
dim(oRF)
dim(oRF)
oRF
table(oRF,oGBM)
help(which)
match <- which(oRF == oGBM)
match
length(match)
length(oRF)
truth <- vowel.test$y[match]
length(vowel.test$y)
length(truth)
pred <- oRF[match]
table(pred,truth)
comp <- table(pred,truth)
help(accuracy)
sum(pred == truth)
length(pred)
help(for)
help("for")
seq(10)
sum(pred == truth)/length(truth)
sum(oRF[match] == truth[match])/length(oRF[match])
truth[match]
d <- data.frame(match=match,truth=truth)
d
delete(d)
remove(d)
d <- data.frame(match=pred,truth=truth)
d
help(confusionMatrix)
confusionMatrix(table(pred,truth))
confusionMatrix(as.factor(pred),as.factor(truth))
oRF == oGBM
oRF
oGBM
